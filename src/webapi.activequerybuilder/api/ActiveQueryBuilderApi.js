/**
 * QueryBuilderApi
 * Active Query Builder Web API lets create, analyze and modify SQL queries for different database servers using RESTful HTTP requests to a cloud-based service. It requires SQL execution context (information about database schema and used database server) to be stored under the registered account at https://webapi.activequerybuilder.com/.
 *
 * OpenAPI spec version: 1.1.6
 * Contact: support@activedbsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['webapi.activequerybuilder/ApiClient', 'webapi.activequerybuilder/model/SqlQuery', 'webapi.activequerybuilder/model/QueryColumn', 'webapi.activequerybuilder/model/Transform', 'webapi.activequerybuilder/model/TransformResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SqlQuery'), require('../model/QueryColumn'), require('../model/Transform'), require('../model/TransformResult'));
  } else {
    // Browser globals (root is window)
    if (!root.WebapiActiveQueryBuilder) {
      root.WebapiActiveQueryBuilder = {};
    }
    root.WebapiActiveQueryBuilder.ActiveQueryBuilderApi = factory(root.WebapiActiveQueryBuilder.ApiClient, root.WebapiActiveQueryBuilder.SqlQuery, root.WebapiActiveQueryBuilder.QueryColumn, root.WebapiActiveQueryBuilder.Transform, root.WebapiActiveQueryBuilder.TransformResult);
  }
}(this, function(ApiClient, SqlQuery, QueryColumn, Transform, TransformResult) {
  'use strict';

  /**
   * ActiveQueryBuilder service.
   * @module webapi.activequerybuilder/api/ActiveQueryBuilderApi
   * @version 1.1.6
   */

  /**
   * Constructs a new ActiveQueryBuilderApi. 
   * @alias module:webapi.activequerybuilder/api/ActiveQueryBuilderApi
   * @class
   * @param {module:webapi.activequerybuilder/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:webapi.activequerybuilder/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Returns list of columns for the given SQL query.
     * @param {{module:webapi.activequerybuilder/model/SqlQuery}} query Information about SQL query and it&#39;s context.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link {Array.<module:webapi.activequerybuilder/model/QueryColumn>}}
     */
    this.getQueryColumnsPost = function(query) {
      var postBody = query;

      // verify the required parameter 'query' is set
      if (query == undefined || query == null) {
        throw "Missing the required parameter 'query' when calling getQueryColumnsPost";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/xml'];
      var accepts = ['application/json', 'text/html'];
      var returnType = [QueryColumn];

      return this.apiClient.callApi(
        '/getQueryColumns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


    /**
     * Transforms the given SQL query according to the commands provided in this request. You can add constraints, hide some of the resultset columns, chang sorting or limit rows of resultset. All transformations can only lead to reorganization or limitation of the resultset data. This means that it&#39;s impossible to get transformed SQL that reveals any other data than the data retutned by original query.
     * @param {{module:webapi.activequerybuilder/model/Transform}} transform SQL transformation parameters and commands.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link {module:webapi.activequerybuilder/model/TransformResult}}
     */
    this.transformSQLPost = function(transform) {
      var postBody = transform;

      // verify the required parameter 'transform' is set
      if (transform == undefined || transform == null) {
        throw "Missing the required parameter 'transform' when calling transformSQLPost";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/xml'];
      var accepts = ['application/json', 'text/html'];
      var returnType = TransformResult;

      return this.apiClient.callApi(
        '/transformSQL', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }
  };

  return exports;
}));
